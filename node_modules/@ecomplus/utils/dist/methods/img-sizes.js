"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.split");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var imgSizes = function imgSizes(img) {
  // defaul sizes object with zeros
  var sizes = {
    width: 0,
    height: 0
  };
  var sizeString;

  if (_typeof(img) === 'object' && img !== null) {
    sizeString = img.size;
  } else {
    // expect to receive img as size string
    sizeString = img;
  }

  if (typeof sizeString === 'string') {
    sizeString.split('x').forEach(function (value, index) {
      // parse width and height to numbers
      value = parseFloat(value);

      if (!isNaN(value)) {
        sizes[index === 0 ? 'width' : 'height'] = value;
      }
    });
  } // returns object with width and height


  return sizes;
};
/**
 * @method
 * @memberof ecomUtils
 * @name imgSizes
 * @description Splits image size string and returns object with 'width' and 'height'.
 * @param {object|string} img - Image object body or size string
 * @returns {object}
 *
 * @example
 * // Using a img sizes string as parameter
 * const size = '200x50'
 * ecomUtils.imgSizes(size)
 * // => {width: 200, height: 50}
 * // Using a img sizes object as parameter
 * const sizeObj = {size: '1000x1000'}
 * ecomUtils.imgSizes(sizeObj)
 * // => {width: 1000, height: 1000}
 */


var _default = imgSizes;
exports.default = _default;