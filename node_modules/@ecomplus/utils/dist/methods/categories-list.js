"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.split");

require("core-js/modules/es.string.trim");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var categoriesList = function categoriesList(product) {
  var categoryTree;

  if (_typeof(product) === 'object' && product !== null) {
    // try to get categories from product body object
    if (product.category_tree) {
      categoryTree = product.category_tree;
    } else if (Array.isArray(product.categories) && product.categories[0]) {
      // use the first category from list
      return [product.categories[0].name];
    }
  } else {
    // category tree string received as param ?
    categoryTree = product;
  }

  if (typeof categoryTree === 'string') {
    var categories = categoryTree.split('>');

    for (var i = 0; i < categories.length; i++) {
      // remove white spaces from names
      categories[i] = categories[i].trim();
    } // list of category names


    return categories;
  } // fallback returning empty array


  return [];
};
/**
 * @method
 * @memberof ecomUtils
 * @name categoriesList
 * @description Parse category tree string to list of categories names.
 * @param {object|string} product - Product object body or category tree string
 * @returns {array}
 *
 * @example
 * // Can be a category tree, like:
 * const categoryTree = 'Quarto > Cama > Travesseiros'
 * // So use categoryTree is parameter of function categoriesList, like:
 * ecomUtils.categoriesList(categoryTree)
 * // => ["Quarto", "Cama", "Travesseiros"]
 * // Or can be a product body object like:
 * const product = { name: 'Ultimate', categories: [{name: 'Cadeira Gamer'},{name: 'PerifÃ©ricos'}]}
 * ecomUtils.categoriesList(product)
 * => ["Cadeira Gamer"]
 */


var _default = categoriesList;
exports.default = _default;