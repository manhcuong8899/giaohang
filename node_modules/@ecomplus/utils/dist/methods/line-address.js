"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _config2 = _interopRequireDefault(require("./../lib/config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var lineAddress = function lineAddress(address, noNumberString) {
  var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _config2.default.get('lang');

  // parse to full address string
  if (address) {
    var addresses = address.addresses;

    if (Array.isArray(addresses)) {
      // customer body object received as param
      address = addresses.filter(function (addr) {
        return addr.default;
      })[0] || addresses[0];
    }

    if (_typeof(address) === 'object' && address !== null) {
      if (address.line_address) {
        return address.line_address;
      } // concat address object properties


      var _address = address,
          street = _address.street,
          number = _address.number,
          complement = _address.complement,
          borough = _address.borough,
          city = _address.city;
      var province = address.province_code || address.province;

      var _lineAddress;

      if (street) {
        _lineAddress = street + ', ' + number || // address without number
        noNumberString || (lang === 'pt_br' ? 'S/N' : '-');

        if (complement) {
          _lineAddress += ' - ' + complement;
        }

        if (borough) {
          _lineAddress += ', ' + borough;
        }
      } else if (borough) {
        _lineAddress = borough;
      } // add city and state


      if (city) {
        _lineAddress += ' | ' + city;
      }

      if (province) {
        _lineAddress += ' | ' + province;
      }

      return _lineAddress;
    }
  } // fallback returning empty string


  return '';
};
/**
 * @method
 * @memberof ecomUtils
 * @name lineAddress
 * @description Returns full address string from customer object.
 * @param {object} address - Address object or customer body object
 * @param {string} [noNumberString] - String to show when address has no number
 * @param {string} [lang=$ecomConfig.get('lang')] - Snake case language code, eg.: 'en_us', 'pt_br'
 * @returns {string}
 *
 * @example
 * const address = { 'zip': '35800-999', 'name': 'Jonh Lock', 'street': 'Rua Europa', 'number': 900, 'borough': 'Santa Lucia', 'city': 'Bom Despacho', 'province_code': 'MG'}
 * const lang = 'pt_br'
 * ecomUtils.lineAddress(address, lang)
 * // => 'Rua Europa, 900, Santa Lucia | Bom Despacho | MG'
 */


var _default = lineAddress;
exports.default = _default;