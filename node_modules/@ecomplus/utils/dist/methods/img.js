"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _config2 = _interopRequireDefault(require("./../lib/config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var img = function img(product, pictureId, size) {
  if (!size) {
    size = _config2.default.get('default_img_size') || 'normal';
  }

  if (product) {
    // product object has 'pictures'
    // cart item object has 'picture'
    var pictures = product.pictures,
        picture = product.picture;

    if (!picture) {
      if (!pictures) {
        if (Array.isArray(product)) {
          // received list of pictures ?
          pictures = product;
        } else {
          // received picture object ?
          picture = product;
        }
      }
    }

    if (Array.isArray(pictures)) {
      // select one img object from product pictures
      picture = pictureId && pictures.filter(function (pic) {
        return pic._id === pictureId;
      })[0] || pictures[0];
    }

    var _img;

    if (_typeof(picture) === 'object' && picture !== null) {
      _img = picture[size];

      if (!_img) {
        // try predefined any size
        var sizes;

        switch (size) {
          case 'small':
            sizes = ['normal', 'big'];
            break;

          case 'normal':
            sizes = ['big', 'zoom', 'small'];
            break;

          case 'big':
            sizes = ['zoom', 'normal'];
            break;

          case 'zoom':
            sizes = ['big'];
            break;

          default:
            sizes = ['big', 'zoom', 'normal', 'small'];
        }

        for (var i = 0; i < sizes.length; i++) {
          var _size = sizes[i];

          if (picture[_size]) {
            return picture[_size];
          }
        } // last try with custom sizes


        for (var _size2 in picture) {
          if (picture[_size2] && picture[_size2].url) {
            return picture[_size2];
          }
        }
      }
    }

    return _img;
  }

  return undefined;
};
/**
 * @method
 * @memberof ecomUtils
 * @name img
 * @description Returns img object (with url and alt) from product body or pictures list.
 * @param {object|array} product - Product body object or list of picture objects
 * @param {string} [pictureId] - ObjectID of preferred picture to find in the list
 * @param {string} [size=$ecomConfig.get('default_img_size')] - Preferred image size
 * (generally `normal`) to find on picture object
 * @returns {object|undefined}
 *
 * @example
 * const product = { 'pictures': [ { 'small': { 'url': 'https://ecom.com/imgs/100px/64gb.jpg'}, 'big': { 'url': 'https://ecom.com/imgs/700px/64gb.jpg' }, '_id': '694890155127368133600000' }, { 'small': { 'url': 'https://ecom.com/imgs/100px/e-5-64gb.jpg' }, 'big': { 'url': 'https://ecom.com/imgs/700px/e-5-64gb.jpg' }, '_id': '694890155127368133600001' }, { 'small': { 'url': 'https://ecom.com/imgs/100px/5-64gb.jpg' }, 'big': { 'url': 'https://ecom.com/imgs/700px/5-64gb.jpg' }, '_id': '694890155127368133600002' } ], 'name': 'Smartphone Xiaomi' }
 * const id = '694890155127368133600001'
 * const size = 'big'
 * ecomUtils.img(product, id, size)
 * // => {url: 'https://ecom.com/imgs/700px/e-5-64gb.jpg'}
 */


var _default = img;
exports.default = _default;