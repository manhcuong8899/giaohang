"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var searchedItems = function searchedItems(result) {
  var hits;

  if (_typeof(result) === 'object' && result !== null) {
    if (Array.isArray(result)) {
      hits = result;
    } else if (result.hits) {
      // ELS response body
      hits = result.hits.hits || result.hits;
    }
  } // setup items list
  // array of nested objects


  var items = [];

  if (Array.isArray(hits)) {
    // map items array from ELS hits list
    hits.forEach(function (_ref) {
      var _id = _ref._id,
          _source = _ref._source;
      items.push(Object.assign({}, _source, {
        _id: _id
      }));
    });
  }

  return items;
};
/**
 * @method
 * @memberof ecomUtils
 * @name searchedItems
 * @description Returns array of items (products) from Search API response.
 * @param {object|array} result - Search response body or ELS hits array
 * @returns {array}
 *
 * @example
 * // Full Search API response samples:
 * // https://developers.e-com.plus/docs/api/#/search/items/items
 * const result = { took: 6, hits: { total: 2, hits: [] } }
 * result.hits.hits.push({ _id: '123', _source: { sku: 'TEST', name: 'Test' } })
 * result.hits.hits.push({ _id: '456', _source: { sku: 'SMP', name: 'Smp' } })
 * ecomUtils.searchedItems(result)
 * // => [ { _id: '123', sku: 'TEST', name: 'Test' }, { _id: '456', sku: 'SMP', name: 'Smp' } ]
 * // Same passing the `hits` array as param
 * ecomUtils.searchedItems(result.hits.hits)
 * // => [ { _id: '123', sku: 'TEST', name: 'Test' }, { _id: '456', sku: 'SMP', name: 'Smp' } ]
 */


var _default = searchedItems;
exports.default = _default;